def verify_scenario_steps_and_configuration(project):
    ''' Verify the existence of build, clean, compute metrics, run checks steps,
        and check for scenario triggers and reporters.

        Parameters:
        -----------
        project: DSS Project
            DSS project

        Returns:
        --------
        scenario_validation: dict
            Contains validation status and reason for required steps, triggers, and reporters.
    '''
    scenarios_list = project.list_scenarios()
    #you need to define every validation criteria you want to evaluate
    scenario_validation = {
        'build_steps': [],
        'clean_steps': [],
        'compute_metrics_steps': [],
        'run_checks_steps': [],
        'triggers': [],
        'reporters': []
    }
    
    for scenario in scenarios_list:
        sc_id = scenario['id']
        scenario_obj = project.get_scenario(sc_id)
        settings = scenario_obj.get_settings().get_raw()
        steps = settings.get('params', {}).get('steps', [])
        
        # Check for required steps
        for step in steps:
            if step.get('type') == 'build_flowitem':
                scenario_validation['build_steps'].append(sc_id)

            if step.get('type') == 'runnable' and 'pyrunnable_clear-intermediate-datasets' in step.get('params', {}).get('runnableType', ''):
                scenario_validation['clean_steps'].append(sc_id)

            if step.get('type') == 'compute_metrics':
                scenario_validation['compute_metrics_steps'].append(sc_id)

            if step.get('type') == 'run_checks':
                scenario_validation['run_checks_steps'].append(sc_id)

        # Examine triggers
        if 'triggers' in settings:
            scenario_validation['triggers'].append({'scenario': sc_id, 'triggers': settings['triggers']})
        
        # Examine reporters
        if 'reporters' in settings:
            scenario_validation['reporters'].append({'scenario': sc_id, 'reporters': settings['reporters']})


    # Determine status and reason based on findings
    for step_type, step_list in scenario_validation.items():
        if step_type in ['build_steps', 'clean_steps', 'compute_metrics_steps', 'run_checks_steps']:
            status_key = f'{step_type[:-5]}_status'  # Removes '_steps' and appends '_status'
            if not step_list:
                scenario_validation[status_key] = {'status': 'KO', 'reason': f'No {step_type[:-5].replace("_", " ")} step found in any scenario.'}
            else:
                scenario_validation[status_key] = {'status': 'OK', 'reason': f'{step_type[:-5].replace("_", " ")} step found in scenarios: {step_list}'}

    return scenario_validation
